//starting non-terminal
<program> ::= <statement>*

----------- Statement types -----------
<statement> ::= <load_statement> | <call_statement> | <store_statement>
                | <jump_statement> | <allocate_statement> | <branch_statement> | <return_statement>

<load_statement> ::= (REGISTER | RV_REG) EQ BYTE_SIZE? (<expr> | <function>)

<allocate_statement> ::= SP_REG EQ <expr>

<call_statement> ::= CALL_OP (<function> | REGISTER)

<store_statement> ::= <mem_expr> EQ BYTE_SIZE? <numeric_val>

<jump_statement> ::= JUMP_OP <alu_expr>

<branch_statement> ::=  BRANCH_OP <numeric_val> COMMA <numeric_val> COMMA <alu_expr>

<return_statement> ::= RETURN

// Examples:
// BEQ R1, 0, 344
// BLT R2, R3, PC + 8

---------------------------------------
----------- Expression types ----------

<expr> ::= <alu_expr> | <mem_expr>

<alu_expr> ::= <numeric_val> (<alu> <numeric_val>)?

<mem_expr> ::= MEM LB <alu_expr> RB

---------------------------------------
------------ Operator types -----------

<alu> ::= PLUS | MINUS | MUL | DIV # Binary Operators

---------------------------------------
------------- Value types -------------  # name 10/10

<numeric_val> ::= (PLUS | MINUS)? (<all_reg> | NUMERIC_LITERAL)

<function> ::= LT IDENTIFIER GT

<all_reg> ::= REGISTER | PC_REG | SP_REG | RV_REG
